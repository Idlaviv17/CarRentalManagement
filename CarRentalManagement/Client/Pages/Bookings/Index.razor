@page "/bookings/"
@inject IHttpRepository<Booking> _client
@inject IJSRuntime js
@implements IDisposable
@attribute [Authorize]

<HeadingComponent Text="Bookings" />
<br />

<a href="/bookings/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New Booking
</a>
<hr />
<br />

@if (Bookings == null)
{
	<div class="alert alert-info">Loading Bookings...</div>
}
else
{
	<table class="table" id="bookingsTable">
		<thead>
			<tr>
				<th>Customer Tax Id</th>
				<th>Date</th>
				<th>Duration in Days</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var booking in Bookings)
			{
				<tr>
					<td>@booking.Customer.TaxId</td>
					<td>@booking.DateCreated.Date.ToString("dd MMMM yyyy")</td>
					<td>
						@(booking.DateIn != null ? Math.Round((booking.DateIn.Value - booking.DateOut).TotalDays).ToString()
							: "To Be Determined")
					</td>
					<td>
						<a href="/Bookings/view/@booking.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>
						<a href="/bookings/edit/@booking.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>
						<button class="btn btn-danger" @onclick="@(() => Delete(booking.Id))">
							<span class="oi oi-delete"></span>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<Booking> Bookings;

	protected async override Task OnInitializedAsync()
	{
		Bookings = await _client.GetAll($"{Endpoints.BookingsEndpoint}");
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
	}

	private async Task Delete(int bookingId)
	{
		var booking = Bookings.First(q => q.Id == bookingId);
		var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {booking.Customer.TaxId}?");
		if (confirm)
		{
			await _client.Delete(Endpoints.BookingsEndpoint, bookingId);
			await OnInitializedAsync();
		}
	}
}
